package com.elisis.anpmt2.loader;

import java.util.Map;

import com.elisis.anpmt2.ANPMT2;
import com.elisis.anpmt2.enums.Materials;
import com.elisis.anpmt2.enums.SubTags;
import com.elisis.anpmt2.gentype.Isotope;
import com.elisis.anpmt2.util.MaterialUtils;

public class MaterialLoader {
	
	public static void init() {
		
		Materials[] materialsArray = Materials.MATERIALS_MAP.values().toArray(new Materials[0]);
		
		for (Materials mat : materialsArray) {	
			ANPMT2.LOGGER.warn("In for loop\n");
			if (mat.getStatesToGenerate().get(0)) {
				ANPMT2.LOGGER.warn("genning solids\n");
				addAutoGeneratedSolids(mat);
			}
			
			if (mat.getStatesToGenerate().get(1)) {
				addAutoGeneratedLiquid(mat);
			}
			
			if (mat.getStatesToGenerate().get(2)) {
				addAutoGeneratedGas(mat);
			}
			
			
			 
		}
		
		//RegistrationHandler.registerFluids();
	}
	
	
	private static void addAutoGeneratedSolids(Materials mat) {
		ANPMT2.LOGGER.warn("In Solids\n");
		if (mat.contains(SubTags.METALLIC)) {
			ANPMT2.LOGGER.warn("Metallic");
			
			if (mat.getId() != 26) {
				MaterialUtils.generateIngot(mat);
			}
				
		}
		
		if (mat.contains(SubTags.WORKABLE)) {
			MaterialUtils.generatePlate(mat);
		}
		
		if (mat.contains(SubTags.DUSTY)) {
			MaterialUtils.generateDust(mat);
			
			if (mat.contains(SubTags.MORE_DUSTY)) {
				MaterialUtils.generateFineDust(mat);
			}
		}
		
		if (mat.contains(SubTags.DUCTILE)) {
			MaterialUtils.generateWires(mat);
			MaterialUtils.generateWireBlock(mat);
		}
		
		if (mat.contains(SubTags.MINABLE)) {
			MaterialUtils.generateOre(mat);
		}
		
	}
	
	private static void addAutoGeneratedLiquid(Materials mat) {
		
		
		
	}
	
	private static void addAutoGeneratedGas(Materials mat) {
		
		MaterialUtils.generateGas(mat);
		
	}
	
}
